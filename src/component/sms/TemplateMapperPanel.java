/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package component.sms;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import models.User;


/**
 *
 * @author Codepal
 */
public class TemplateMapperPanel extends javax.swing.JPanel {
    private JComboBox<String> classComboBox;
    private JComboBox<String> fieldComboBox;
    private JButton addButton;
    private JTextArea templateTextArea;
    private JButton generateButton;

    private List<Class<?>> classes;
    /**
     * Creates new form TemplateMapperPanel
     */
    public TemplateMapperPanel() {
        initComponents();
        initUtility();
    }
    
    private void initUtility() {
        
        JPanel mainPanel = new JPanel(new BorderLayout());

        // Panel for class selection and field selection
        JPanel selectionPanel = new JPanel(new GridLayout(2, 2));
        classComboBox = new JComboBox<>();
        fieldComboBox = new JComboBox<>();
        addButton = new JButton("Add Field");
        selectionPanel.add(new JLabel("Select Class:"));
        selectionPanel.add(classComboBox);
        selectionPanel.add(new JLabel("Select Field:"));
        selectionPanel.add(fieldComboBox);
        selectionPanel.add(addButton);

        // Panel for template input and generation
        JPanel templatePanel = new JPanel(new BorderLayout());
        templateTextArea = new JTextArea(10, 30);
        generateButton = new JButton("Generate Template");
        templatePanel.add(new JLabel("Template Content:"), BorderLayout.NORTH);
        templatePanel.add(new JScrollPane(templateTextArea), BorderLayout.CENTER);
        templatePanel.add(generateButton, BorderLayout.SOUTH);

        mainPanel.add(selectionPanel, BorderLayout.NORTH);
        mainPanel.add(templatePanel, BorderLayout.CENTER);

        dataLayout.add(mainPanel);

        // Add action listeners
        classComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateFieldComboBox();
            }
        });

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addFieldToTemplate();
            }
        });

        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generateTemplate();
            }
        });

        // Initialize
        classes = new ArrayList<>();
        populateClassComboBox();
    }

    private void populateClassComboBox() {
        // Add your classes here for selection
        classes.add(User.class); // Example class
        for (Class<?> clazz : classes) {
            classComboBox.addItem(clazz.getSimpleName());
        }
        updateFieldComboBox();
    }

    private void updateFieldComboBox() {
        fieldComboBox.removeAllItems();
        if (classComboBox.getSelectedIndex() != -1) {
            Class<?> selectedClass = classes.get(classComboBox.getSelectedIndex());
            Field[] fields = selectedClass.getDeclaredFields();
            for (Field field : fields) {
                fieldComboBox.addItem(field.getName());
            }
        }
    }

    private void addFieldToTemplate() {
        String selectedField = (String) fieldComboBox.getSelectedItem();
        if (selectedField != null && !selectedField.isEmpty()) {
            templateTextArea.append("{" + selectedField + "}");
        }
    }

    private void generateTemplate() {
        String templateContent = templateTextArea.getText();
        // Do something with generated template content
        System.out.println("Generated Template Content:\n" + templateContent);
    }



  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        dataLayout = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Load Excel:");
        jPanel1.add(jLabel1);

        jButton1.setText("Open");
        jPanel1.add(jButton1);

        add(jPanel1, java.awt.BorderLayout.NORTH);
        add(dataLayout, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel dataLayout;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
